swagger: '2.0'
info:
  title: Query Service REST API
  version: capella
  description: |
    The Query Service REST API is provided by the Query service.
    This API enables you to run {sqlpp} queries and set request-level parameters.

    The API schemes and host URLs are as follows:

    * http://node:8093/
    * https://node:18093/ (for secure access)

    where `node` is the host name or IP address of a node running the Query service.

produces:
  - application/json

consumes:
  - application/x-www-form-urlencoded
  - application/json

paths:
  /query/service:
    post:
      operationId: post_service
      summary: Query Service
      description: >
        Enables you to execute a {sqlpp} statement.
        This method allows you to run queries and modifying statements, and specify query parameters.
      parameters:
        - in: body
          name: Parameters
          required: true
          description: An object specifying one or more query parameters.
          schema:
            $ref: "#/definitions/Request Parameters"
      security:
        - Header: []
        - Parameter: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "403":
          $ref: '#/responses/Forbidden'
        "404":
          $ref: '#/responses/NotFound'
        "405":
          $ref: '#/responses/MethodNotAllowed'
        "409":
          $ref: '#/responses/Conflict'
        "410":
          $ref: '#/responses/Gone'
        "413":
          $ref: '#/responses/PayloadTooLarge'
        "500":
          $ref: '#/responses/InternalServerError'
        "503":
          $ref: '#/responses/ServiceUnavailable'
    get:
      operationId: get_service
      summary: Read-Only Query Service
      description: >
        Enables you to execute a {sqlpp} statement.
        This method allows you to run queries and modifying statements, and specify query parameters.
        It does not allow you to run modifying statements.


        This endpoint is intended for situations where use of the `POST` method is restricted.
      security:
        - Header: []
        - Parameter: []
      responses:
        "200":
          $ref: '#/responses/OK'
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "403":
          $ref: '#/responses/Forbidden'
        "404":
          $ref: '#/responses/NotFound'
        "405":
          $ref: '#/responses/MethodNotAllowed'
        "409":
          $ref: '#/responses/Conflict'
        "410":
          $ref: '#/responses/Gone'
        "413":
          $ref: '#/responses/PayloadTooLarge'
        "500":
          $ref: '#/responses/InternalServerError'
        "503":
          $ref: '#/responses/ServiceUnavailable'

# Use attributes for xrefs so that they can point to different locations in different contexts

responses:
  OK:
    description: The operation was successful.
    schema:
      $ref: "#/definitions/Response Body"

  BadRequest:
    description: >
      Bad Request.
      The request cannot be processed for one of the following reasons:


        * The statement contains a {sqlpp} syntax error.


        * The request has a missing or unrecognized HTTP parameter.


        * The request is badly formatted (for example, the request body contains a JSON syntax error).

  Unauthorized:
    description: >
      Unauthorized.
      The credentials provided with the request are missing or invalid.

  Forbidden:
    description: >
      Forbidden.
      There is a read-only violation.
      Either there was an attempt to create or update in a GET request or a POST request where `readonly` is set, or the client does not have the authorization to modify an object (index, keyspace or namespace) in the statement.

  NotFound:
    description: >
      Not found.
      The statement in the request references an invalid namespace or keyspace.

  MethodNotAllowed:
    description: >
      Method not allowed.
      The statement in the request references an invalid namespace or keyspace.

  Conflict:
    description: >
      Conflict.
      There is an attempt to create an object (keyspace or index) that already exists.

  Gone:
    description: >
      Gone.
      The server is shutting down gracefully.
      Previously made requests are being completed, but no new requests are being accepted.

  InternalServerError:
    description: >
      Internal server error.
      There was an unforeseen problem processing the request.

  PayloadTooLarge:
    description: >
      Payload too large.
      The query is too large for the Query Service to process.

  ServiceUnavailable:
    description: >
      Service unavailable.
      There is an issue (that is possibly temporary) preventing the request being processed; the request queue is full or the data store is not accessible.

definitions:
  Request Parameters:
    type: object
    title: Request Parameters
    properties:
      args:
        type: array
        items: {}
        description: |
          [[args]]
          Applicable if the statement has 1 or more positional parameters.
          
          An array of JSON values, one for each positional parameter in the statement.

          Note that positional parameters apply to `prepared` also.

          Refer to {section_srh_tlm_n1b}[] for details.
        example:
          - LAX
          - 6
      atrcollection:
        type: string
        description: |
          [[atrcollection_req]]
          Specifies the collection where the {transactions-understanding-transactions}[active transaction record] (ATR) is stored.
          The collection must be present.
          If not specified, the ATR is stored in the default collection in the default scope in the bucket containing the first mutated document within the transaction.

          The value must be a string in the form `"bucket.scope.collection"` or `"namespace:bucket.scope.collection"`.
          If any part of the path contains a special character, that part of the path must be delimited in backticks `&grave;&grave;`.

          The {atrcollection-srv}[node-level] `atrcollection` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.
        example: default:&grave;travel-sample&grave;.transaction.test
      auto_execute:
        type: boolean
        description: |
          [[auto_execute]]
          Specifies that prepared statements should be executed automatically as soon as they are created.
          This saves you from having to make two separate requests in cases where you want to prepare a statement and execute it immediately.

          Refer to {prepare-auto-execute}[Auto-Execute] for more information.
        default: false
        example: true
      # batch_args:
      #   type: array
      #   description: |
      #     [[batch_args]]
      #     Applicable to POST requests only, containing UPDATE, INSERT, DELETE statements (DML statements) with _positional_ parameters.

      #     An array of arrays.
      #     The values in each inner array need to match the positional parameters in the statement.
      # batch_named_args:
      #   type: array
      #   description: |
      #     [[batch_named_args]]
      #     Applicable to POST requests only, containing UPDATE, INSERT, DELETE statements (DML statements) with _named_ parameters.

      #     An array of objects.
      #     The keys in each object need to match the named parameters in the statement.
      client_context_id:
        type: string
        description: |
          [[client_context_id]]
          A piece of data supplied by the client that is echoed in the response, if present.
          {sqlpp} is agnostic about the content of this parameter; it is just echoed in the response.

          * Maximum allowed size is 64 characters; all others will be cut.
          * If it contains an escape character `/` or quote `"`, it will be rejected as error code 1110.
      compression:
        type: string
        description: |
          [[compression]]
          Compression format to use for response data on the wire.

          Values are case-insensitive.
        enum: ["ZIP", "RLE", "LZMA", "LZO", "NONE"]
        default: NONE
        example: zip
      controls:
        type: boolean
        description: |
          [[controls_req]]
          Specifies if there should be a controls section returned with the request results.

          When set to `true`, the query response document includes a controls section with runtime information provided along with the request, such as positional and named parameters or settings.

          If the request qualifies for caching, these values will also be cached in the `completed_requests` system keyspace.

          The {controls-srv}[node-level] `controls` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.
        example: true
      creds:
        type: array
        items:
          $ref: "#/definitions/Credentials"
        description: |
          [[creds]]
          Specifies the login credentials.
          The Query API supports two types of identity: local (or bucket) and admin.

          The format is an identity and password.
          You can specify credentials for multiple identities.

          If credentials are supplied in the request header, then HTTP Basic Authentication takes precedence and `creds` is ignored.
        example:
          - user: local:bucket-name
            pass: password
          - user: admin:admin-name
            pass: password
      durability_level:
        type: string
        description: |
          [[durability_level]]
          The level of {durability}[durability] for mutations produced by the request.

          If the request contains a `BEGIN TRANSACTION` statement, or a DML statement with the {tximplicit}[tximplicit] parameter set to `true`, the durability level is specified for all mutations within that transaction.

          Durability is also supported for non-transactional DML statements.
          In this case, the `kvtimeout` parameter is used as the durability timeout.

          If not specified, the default durability level is `"majority"`.
          Set the durability level to `"none"` or `""` to specify no durability.
        enum: ['""', "none", "majority", "majorityAndPersistActive", "persistToMajority"]
        default: majority
        example: none
      encoded_plan:
        type: string
        description: |
          [[encoded_plan]]
          In Couchbase Server 6.5 and later, this parameter is ignored and has no effect.
          It is included for compatibility with previous versions of Couchbase Server.
      encoding:
        type: string
        description: |
          [[encoding]]
          Desired character encoding for the query results.

          Only possible value is `UTF-8` and is case-insensitive.
        default: UTF-8
      format:
        type: string
        description: |
          [[format]]
          Desired format for the query results.

          Values are case-insensitive.
        enum: ["JSON", "XML", "CSV", "TSV"]
        default: JSON
        example: XML
      kvtimeout:
        type: string
        description: |
          [[kvtimeout]]
          The maximum time to wait for a KV operation before timing out.
          Only applies to statements within a transaction, or to non-transactional statements when the `durability_level` is set.

          The value for this parameter is a string.
          Its format includes an amount and a mandatory unit, e.g. `10ms` (10 milliseconds) or `0.5s` (half a second).
          Valid units are:

          * `ns` (nanoseconds)
          * `us` (microseconds)
          * `ms` (milliseconds)
          * `s` (seconds)
          * `m` (minutes)
          * `h` (hours)

          Specify a duration of `0` or a negative duration to disable.
          When disabled, no timeout is applied and the KV operation runs for however long it takes.
        default: 2.5s
        example: 10ms
      max_parallelism:
        type: integer
        format: int32
        description: |
          [[max_parallelism_req]]
          Specifies the maximum parallelism for the query.

          The {max-parallelism-srv}[node-level] `max-parallelism` setting specifies the ceiling for this parameter for a single node.
          If the request-level parameter is zero or negative, the parallelism for the query is set to the node-level setting.
          If the request-level parameter is greater than zero and less than the node-level setting, the request-level parameter overrides the node-level setting.
          If the request-level parameter is greater than the node-level setting, the parallelism for the query is set to the node-level setting.

          In addition, the {queryMaxParallelism}[cluster-level] `queryMaxParallelism` setting specifies the ceiling for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.

          To enable queries to run in parallel, you must specify the cluster-level `queryMaxParallelism` parameter, or specify the node-level `max-parallelism` parameter on all Query nodes.

          The default value is the same as the number of partitions of the index selected for the query.
        example: 3
      memory_quota:
        type: integer
        format: int32
        description: |
          [[memory_quota_req]]
          Specifies the maximum amount of memory the request may use, in MB.

          Specify `0` (the default value) to disable.
          When disabled, there is no quota.

          This parameter enforces a ceiling on the memory used for the tracked documents required for 
          processing a request. It does not take into account any other memory that might be used to 
          process a request, such as the stack, the operators, or some intermediate values.
          
          Within a transaction, this setting enforces the memory quota for the transaction by tracking the
          delta table and the transaction log (approximately).

          The {memory-quota-srv}[node-level] `memory-quota` setting specifies the ceiling for this parameter for a single node.
          If the node-level setting is zero (the default), the request-level parameter overrides the node-level setting.
          If the node-level setting is greater than zero, the request-level parameter is capped by the node-level setting.

          In addition, the {queryMemoryQuota}[cluster-level] `queryMemoryQuota` setting specifies the ceiling for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        default: 0
        example: 4
      metrics:
        type: boolean
        description: |
          [[metrics]]
          Specifies that metrics should be returned with query results.
        default: true
        example: false
      namespace:
        type: string
        description: >
          [[namespace]]
          Specifies the namespace to use.
          Currently, only the `default` namespace is available.
        example: default
      numatrs:
        type: integer
        format: int32
        description: |
          [[numatrs_req]]
          Specifies the total number of {transactions-understanding-transactions}[active transaction records].
          Must be a positive integer.

          The {numatrs-srv}[node-level] `numatrs` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.

          In addition, the {queryNumAtrs}[cluster-level] `queryNumAtrs` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        default: 1024
        example: 512
      pipeline_batch:
        type: integer
        format: int32
        description: |
          [[pipeline_batch_req]]
          Controls the number of items execution operators can batch for Fetch from the KV.

          The {pipeline-batch-srv}[node-level] `pipeline-batch` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting, but only if it is lower than the node-level setting.

          In addition, the {queryPipelineBatch}[cluster-level] `queryPipelineBatch` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        example: 64
      pipeline_cap:
        type: integer
        format: int32
        description: |
          [[pipeline_cap_req]]
          Maximum number of items each execution operator can buffer between various operators.

          The {pipeline-cap-srv}[node-level] `pipeline-cap` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting, but only if it is lower than the node-level setting.

          In addition, the {queryPipelineCap}[cluster-level] `queryPipelineCap` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        example: 1024
      prepared:
        type: string
        description: |
          [[prepared]]
          _Required_ if `statement` not provided.

          The name of the prepared {sqlpp} statement to be executed.
          Refer to {execute}[EXECUTE] for examples.

          If both `prepared` and `statement` are present and non-empty, an error is returned.
        example: "[127.0.0.1:8091]pricy_hotel"
      preserve_expiry:
        type: boolean
        description: |
          [[preserve_expiry]]
          Specifies whether documents should keep their current expiration setting when modified by a DML statement.

          If `true`, documents will keep any existing expiration setting when modified by a DML statement.
          If the DML statement explicitly specifies the document expiration, the statement overrides this parameter, and the expiration is changed.

          If `false`, document expiration is set to 0 when modified by a DML statement, unless the DML statement explicitly specifies the document expiration.

          Not supported for statements in a transaction.
        default: false
        example: true
      pretty:
        type: boolean
        description: |
          [[pretty_req]]
          Specifies the query results returned in pretty format.

          The {pretty-srv}[node-level] `pretty` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.
        example: false
      profile:
        type: string
        description: |
          [[profile_req]]
          Specifies if there should be a profile section returned with the request results.
          The valid values are:

          `off`:: No profiling information is added to the query response.

          `phases`::
          The query response includes a profile section with stats and details about various phases of the query plan and execution.
          Three phase times will be included in the `system:active_requests` and `system:completed_requests` monitoring keyspaces.

          `timings`::
          Besides the phase times, the profile section of the query response document will include a full query plan with timing and information about the number of processed documents at each phase.
          This information will be included in the `system:active_requests` and `system:completed_requests` keyspaces.

          If `profile` is not set as one of the above values, then the profile setting does not change.

          The {profile-srv}[node-level] `profile` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.
        enum: ["off", "phases", "timings"]
        example: phases
      query_context:
        type: string
        description: |
          [[query_context]]
          Specifies the namespace, bucket, and scope used to resolve partial keyspace references within the request.

          The query context may be a _full path_, containing namespace, bucket, and scope; or a _relative path_, containing just the bucket and scope.
          Currently, only the `default` namespace is available.
          If the namespace name is omitted, the default namespace in the current session is used.
        default: "default:"
        example: default:travel-sample.inventory
      readonly:
        type: boolean
        description: |
          [[readonly]]
          Controls whether a query can change a resulting recordset.

          If `readonly` is `true`, then the following statements are not allowed:

          * CREATE INDEX
          * DROP INDEX
          * INSERT
          * MERGE
          * UPDATE
          * UPSERT

          When using GET requests, it's best to set `readonly` to `true`.
        default: false
        example: true
      scan_cap:
        type: integer
        format: int32
        description: |
          [[scan_cap_req]]
          Maximum buffered channel size between the indexer client and the query service for index scans.
          This parameter controls when to use scan backfill.

          Use `0` or a negative number to disable.
          Smaller values reduce GC, while larger values reduce indexer backfill.

          The {scan-cap-srv}[node-level] `scan-cap` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting, but only if it is lower than the node-level setting.

          In addition, the {queryScanCap}[cluster-level] `queryScanCap` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        example: 1024
      scan_consistency:
        type: string
        description: |
          [[scan_consistency]]
          Specifies the consistency guarantee or constraint for index scanning.
          The valid values are:

          `not_bounded`::
          No timestamp vector is used in the index scan.
          This is the fastest mode, because it avoids the costs of obtaining the vector and waiting for the index to catch up to the vector.

          `at_plus`::
          This implements bounded consistency.
          The request includes a `scan_vector` parameter and value, which is used as a lower bound.
          This can be used to implement read-your-own-writes (RYOW).

          `request_plus`::
          This implements strong consistency per request.
          Before processing the request, a current vector is obtained.
          The vector is used as a lower bound for the statements in the request.
          If there are DML statements in the request, RYOW is also applied within the request.
          +
          If `request_plus` is specified in a query that runs during a failover of an index node, the query waits until the rebalance operation completes and the index data has rebalanced before returning a result.

          `statement_plus`::
          This implements strong consistency per statement.
          Before processing each statement, a current vector is obtained and used as a lower bound for that statement.

          Values are case-insensitive.

          For multi-statement requests, the default behavior is RYOW within each request.
          If you want to disable RYOW within a request, add a separate `request_consistency` parameter that can be set to `not_bounded`.

          If the request contains a `BEGIN TRANSACTION` statement, or a DML statement with the {tximplicit}[tximplicit] parameter set to `true`, then this parameter sets the transactional scan consistency.
          Refer to {transactional-scan-consistency}[Transactional Scan Consistency] for details.
        enum: ["not_bounded", "at_plus", "request_plus", "statement_plus"]
        default: not_bounded
        example: at_plus
      scan_vector:
        type: object
        x-type: array
        description: |
          [[scan_vector]]
          _Required_ if `scan_consistency` is `at_plus` and `scan_vectors` not provided.

          Specify the lower bound vector timestamp for one keyspace when using `at_plus` scan consistency.

          Scan vectors are built of two-element +[+[.var]`value`, [.var]`guard`] entries:

          * [.var]`value`: a vBucket's sequence number (a JSON number)
          * [.var]`guard`: a vBucket's UUID (a string)

          Scan vectors have two forms:

          . *Full scan vector*: an array of +[+[.var]`value`, [.var]`guard`] entries, giving an entry for every vBucket in the system.
          . *Sparse scan vectors*: an object providing entries for specific vBuckets, mapping a vBucket number (a string) to each +[+[.var]`value`, [.var]`guard`] entry.

          Note that `scan_vector` can only be used if the query uses at most one keyspace; if it is used for a query referencing more than one keyspace, the query will fail with an error.

          For queries referencing multiple keyspaces, use `scan_vectors`.
        example:
          5:
            - 5409393
            - VB5ID
          19:
            - 47574574
            - VB19ID
      scan_vectors:
        type: object
        x-type: array
        description: |
          [[scan_vectors]]
          _Required_ if `scan_consistency` is `at_plus` and `scan_vector` not provided.

          A map from keyspace names to scan vectors.
          See `scan_vector`.

          The scan vectors can be Full or Sparse.
      scan_wait:
        type: string
        format: duration
        description: |
          [[scan_wait]]
          Can be supplied with `scan_consistency` values of `request_plus`, `statement_plus` and `at_plus`.

          Specifies the maximum time the client is willing to wait for an index to catch up to the vector timestamp in the request.

          Specifies how much time the client is willing to wait for the indexer to satisfy the required `scan_consistency` and `scan_vector` criteria.
          After receiving the scan request, if the indexer is unable to catch up within the `scan_wait` time and initiate the scan, the indexer aborts with an error and the scan fails.

          Its format includes an amount and a mandatory unit, e.g. `10ms` (10 milliseconds) or `0.5s` (half a second).
          Valid units are:

          * `ns` (nanoseconds)
          * `us` (microseconds)
          * `ms` (milliseconds)
          * `s` (seconds)
          * `m` (minutes)
          * `h` (hours)

          Specify `0` or a negative integer to disable.
        default: ""
        example: 30m
      signature:
        type: boolean
        description: |
          [[signature]]
          Include a header for the results schema in the response.
        default: true
        example: false
      statement:
        type: string
        description: |
          [[statement]]
          _Required_ if `prepared` not provided.

          Any valid {sqlpp} statement for a POST request, or a read-only {sqlpp} statement (SELECT, EXPLAIN) for a GET request.

          If both `prepared` and `statement` are present and non-empty, an error is returned.

          '''

          When specifying the request parameters as form data, the statement may not contain an unescaped semicolon (`;`).
          If it does, the Query Service responds with error 1040.
          To avoid this, either URL-encode the semicolon as `%3B`, or just omit the semicolon if possible.

          This restriction does not apply when specifying the request parameters in JSON format.
        example: SELECT * FROM &grave;travel-sample&grave;.inventory.hotel LIMIT 1
      timeout:
        type: string
        format: duration
        description: |
          [[timeout_req]]
          Maximum time to spend on the request before timing out.

          The value for this parameter is a string.
          Its format includes an amount and a mandatory unit, e.g. `10ms` (10 milliseconds) or `0.5s` (half a second).
          Valid units are:

          * `ns` (nanoseconds)
          * `us` (microseconds)
          * `ms` (milliseconds)
          * `s` (seconds)
          * `m` (minutes)
          * `h` (hours)

          Specify a duration of `0` or a negative duration to disable.
          When disabled, no timeout is applied and the request runs for however long it takes.

          If {txid}[txid] or {tximplicit}[tximplicit] is set, this parameter is ignored.
          The request inherits the remaining time of the transaction as timeout.

          The {timeout-srv}[node-level] `timeout` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.
          However, if the node-level setting is greater than 0, the timeout for the query is limited to the node-level setting.

          In addition, the {queryTimeout}[cluster-level] `queryTimeout` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        example: 30m
      txdata:
        type: object
        description: |
          [[txdata]]
          Transaction data.
          For internal use only.
      txid:
        type: string
        format: UUID
        description: |
          [[txid]]
          _Required_ for statements within a transaction.

          Transaction ID.
          Specifies the transaction to which a statement belongs.
          For use with DML statements within a transaction, rollbacks, and commits.

          The transaction ID should be the same as the transaction ID generated by the `BEGIN TRANSACTION` statement.
          The transaction must be active and non-expired.
        example: d81d9b4a-b758-4f98-b007-87ba262d3a51
      tximplicit:
        type: boolean
        description: |
          [[tximplicit]]
          Specifies that a DML statement is a singleton transaction.

          When this parameter is true, the Query service starts a transaction and executes the statement.
          If execution is successful, the Query service commits the transaction; otherwise the transaction is rolled back.

          The statement may not be part of an ongoing transaction.
          If the {txid}[txid] request-level parameter is set, the `tximplicit` parameter is ignored.
        default: false
        example: true
      txstmtnum:
        type: integer
        format: int32
        description: |
          [[txstmtnum]]
          Transaction statement number.
          The transaction statement number must be a positive integer, and must be higher than any previous transaction statement numbers in the transaction.
          If the transaction statement number is lower than the transaction statement number for any previous statement, an error is generated.
        example: 10
      txtimeout:
        type: string
        format: duration
        description: |
          [[txtimeout_req]]
          Maximum time to spend on a transaction before timing out.
          Only applies to `BEGIN TRANSACTION` statements, or DML statements for which {tximplicit}[tximplicit] is set.
          For other statements, it is ignored.

          Within a transaction, the request-level {timeout_req}[timeout] parameter is ignored.
          The transaction timeout clock starts when the `BEGIN WORK` statement is successful.
          Once the transaction timeout is reached, no statement is allowed to continue in the transaction.

          The value for this parameter is a string.
          Its format includes an amount and a mandatory unit, e.g. `10ms` (10 milliseconds) or `0.5s` (half a second).
          Valid units are:

          * `ns` (nanoseconds)
          * `us` (microseconds)
          * `ms` (milliseconds)
          * `s` (seconds)
          * `m` (minutes)
          * `h` (hours)

          Specify a duration of `0` to disable.
          When disabled, the request-level timeout is set to the default.

          The {txtimeout-srv}[node-level] `txtimeout` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.
          However, if the node-level setting is greater than 0, the transaction timeout for the query is limited to the node-level setting.

          In addition, the {queryTxTimeout}[cluster-level] `queryTxTimeout` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.

          The default is `"15s"` for cbq files or scripts, `"2m"` for interactive cbq sessions or redirected input.
        example: 30m
      use_cbo:
        type: boolean
        description: |
          [[use_cbo_req]]
          Specifies whether the cost-based optimizer is enabled.

          The {use-cbo-srv}[node-level] `use-cbo` setting specifies the default for this parameter for a single node.
          The request-level parameter overrides the node-level setting.

          In addition, the {queryUseCBO}[cluster-level] `queryUseCBO` setting specifies the default for this parameter for the whole cluster.
          When you change the cluster-level setting, the node-level setting is overwritten for all nodes in the cluster.
        example: true
      use_fts:
        type: boolean
        description: |
          [[use_fts]]
          [.edition]#{enterprise}#

          Specifies that the query should use a full-text index.

          If the query contains a `USING FTS` hint, that takes priority over this parameter.

          If the query does not contain a `USING FTS` hint, and this parameter is set to true, all full-text indexes are considered for the query.
          If a qualified full-text index is available, it is selected for the query.
          If none of the available full-text indexes are qualified, the available GSI indexes are considered instead.

          Refer to {flex-indexes}[Flex Indexes] for more information.
        default: false
        example: true
      $<identifier>:
        type: string
        format: any JSON value
        description: |
          [[identifier]]
          Applicable if the `statement` has 1 or more named parameters.

          The name of a named parameter consists of two parts:

          . The $ character
          . An identifier that starts with an alpha character followed by one or more alphanumeric characters.

          The value of the named parameter is any JSON value.

          Named parameters apply to `prepared` also.

          Refer to {section_srh_tlm_n1b}[] for details.

  Credentials:
    type: object
    title: Credentials
    properties:
      user:
        type: string
        description: >
          An identity for authentication.
          Note that bucket names may be prefixed with `local:`, and admin names may be prefixed with `admin:`.
      pass:
        type: string
        description: A password for authentication.

  Response Body:
    type: object
    title: Response Body
    description: The response body has the following structure.
    properties:
      requestID:
        type: string
        format: UUID
        description: A unique identifier for the response.
      clientContextID:
        type: string
        description: The client context ID of the request, if one was supplied &mdash; see `client_context_id` in {request-parameters}[].
      signature:
        type: object
        description: >
          The schema of the results.
          Present only when the query completes successfully.
        example:
          id: json
      results:
        type: array
        description: >
          An array of all the objects returned by the query.
          An object can be any JSON value.
      status:
        type: string
        description: The status of the request.
        enum:
          - success
          - running
          - errors
          - completed
          - stopped
          - timeout
          - fatal
      errors:
        type: array
        description: >
          An array of 0 or more error objects.
          If an error occurred during processing of the request, it will be represented by an error object in this list.
        items:
          $ref: "#/definitions/Conditions"
      warnings:
        type: array
        description: >
          An array of 0 or more warning objects.
          If a warning occurred during processing of the request, it is represented by a warning object in this list.
        items:
          $ref: "#/definitions/Conditions"
      metrics:
        type: object
        description: An object containing metrics about the request.
        $ref: "#/definitions/Metrics"
      controls:
        type: object
        description: >
          An object containing runtime information provided along with the request.
          Present only if `controls` was set to true in the {request-parameters}[].
        $ref: "#/definitions/Controls"

  Conditions:
    type: object
    description: Errors and warnings have the following format.
    required:
      - code
      - msg
    properties:
      code:
        type: integer
        description: >
          A unique number that identifies the error or warning.
          The code ranges are partitioned by component.
          The codes can also include parts that indicate severity and transience.
          This property is always present in every condition returned in the Query REST API or captured in a log.
      msg:
        type: string
        description: >
          A message describing the error or warning in detail.
          This property is always present in every condition returned in the Query REST API or captured in a log.
      name:
        type: string
        description: >
          Unique name that has a 1:1 mapping to the code.
          Uniquely identifies the condition.
          This property is helpful for pattern matching and can have meaning, making it more memorable than the code.
          The name should be fully qualified.
        example:
          indexing.scan.io_failure
        x-example:
          query.execute.index_not_found
      sev:
        type: integer
        description: |
          One of the following {sqlpp} severity levels, listed in order of severity:

           1. Severe
           2. Error
           3. Warn
           4. Info
      temp:
        type: boolean
        description: >
          Indicates if the condition is transient &mdash; for example, the queue is full.
          If the value is `false`, it tells clients and users that a retry without modification produces the same condition.

  Metrics:
    type: object
    required:
      - elapsedTime
      - executionTime
      - resultCount
      - resultSize
    properties:
      elapsedTime:
        type: string
        description: The total time taken for the request, that is the time from when the request was received until the results were returned.
      executionTime:
        type: string
        description: The time taken for the execution of the request, that is the time from when query execution started until the results were returned.
      resultCount:
        type: integer
        format: unsigned
        description: The total number of objects in the results.
      resultSize:
        type: integer
        format: unsigned
        description: The total number of bytes in the results.
      mutationCount:
        type: integer
        description: The number of mutations that were made during the request.
        format: unsigned
      sortCount:
        type: integer
        format: unsigned
        description: >
          The number of objects that were sorted.
          Present only if the request includes `ORDER BY`.


          If a query includes ORDER BY, LIMIT, or OFFSET clauses, an application can use the `sortCount` value to give the overall number of results in a message such as `"page 1 of N"`.
      usedMemory:
        type: integer
        format: unsigned
        description: >
          The amount of document memory used to execute the request.
          This property is only returned if a memory quota was set for the query.
      errorCount:
        type: integer
        format: unsigned
        description: The number of errors that occurred during the request.
      warningCount:
        type: integer
        format: unsigned
        description: The number of warnings that occurred during the request.

  Controls:
    type: object
    properties:
      scan_consistency:
        type: string
        description: The value of the query setting Scan Consistency used for the query.
      use_cbo:
        type: boolean
        description: Whether the cost-based optimizer was enabled for the query.
      memoryQuota:
        type: integer
        format: unsigned
        description: >
          The memory quota for the request, in MB.
          This property is only returned if a memory quota was set for the query.
      stmtType:
        type: string
        description: The type of query statement.
        example: SELECT

securityDefinitions:
  Header:
    type: basic
    description: |
      Specify a user name and password via HTTP headers.
      This method can only be used to provide a single credential.

  Parameter:
    type: apiKey
    name: creds
    in: query
    description: >
      Specify user names and passwords via the `creds` request parameter.
      This is the only method that can provide multiple credentials for a request.
