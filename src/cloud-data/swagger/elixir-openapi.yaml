openapi: '3.1.0'
x-stoplight:
  id: 7qw1goqcnwdw5
info:
  title: Couchbase Capella Data API
  description: The Couchbase Capella Data API enables you to work with data resources, documents, and queries.
  version: 0.4.0
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  summary: Couchbase Capella Data API
servers:
  - url: 'https://{database}.{host}/'
    description: >
      You can find the Data API endpoint from the Data API section within the Couchbase Capella user interface.
      The Data API endpoint consists of the database name and the host where the database is located.
      The URL scheme must be `https`.
    variables:
      database:
        description: The database name.
        default: dapi
      host:
        description: The host where the database is located.
        default: couchbase.live
tags:
  - name: Documents
    description: Operations to retrieve and modify individual documents.
  - name: Bulk Documents
    description: Operations to retrieve and modify multiple documents in bulk.
  - name: Subdocuments
    description: Operations to retrieve and modify sections of individual documents.
  - name: Queries
    description: Operations to perform queries.
  - name: Metadata
    description: Operations for data resources.
  - name: Specification
    description: Operations for the REST API specification.
security:
  - Basic: []
paths:
  /v1/spec:
    get:
      summary: Get Specification
      tags:
        - Specification
      responses:
        '200':
          description: |
            Success.
            Returns a specification file in the required format.
      operationId: get-v1-spec
      description: Gets the OpenAPI specification document for this REST API.
      parameters:
        - schema:
            type: string
            default: text/html
            enum:
              - text/html
              - application/yaml
              - application/json
          in: header
          name: Accept
          description: |
            The specification file type.
            The default option is a HTML file, generated by Redocly.
      security: []
  /v1/buckets:
    get:
      summary: List Databases or Buckets
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of databases or buckets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketList'
              examples:
                example-1:
                  value:
                    buckets:
                      - Name: api-test
                        FlushEnabled: false
                        ReplicaIndexDisabled: false
                        RAMQuotaMB: 1024
                        NumReplicas: 1
                        BucketType: membase
                        EvictionPolicy: valueOnly
                        MaxTTL: 0
                        MaxExpiry: 0
                        CompressionMode: passive
                        MinimumDurabilityLevel: 1
                        StorageBackend: couchstore
                      - Name: travel-sample
                        FlushEnabled: false
                        ReplicaIndexDisabled: true
                        RAMQuotaMB: 200
                        NumReplicas: 0
                        BucketType: membase
                        EvictionPolicy: valueOnly
                        MaxTTL: 0
                        MaxExpiry: 0
                        CompressionMode: passive
                        MinimumDurabilityLevel: 1
                        StorageBackend: couchstore
        '401':
          $ref: '#/components/responses/401'
      operationId: get-v1-buckets
      description: Gets information on all databases or buckets.
      tags:
        - Metadata
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
  '/v1/buckets/{bucketName}':
    parameters:
      - schema:
          type: string
        name: bucketName
        in: path
        required: true
        description: The name of the database or bucket.
    get:
      summary: Get Database or Bucket Details
      responses:
        '200':
          description: |
            Success.
            Returns an object containing information about one database or bucket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketInfo'
              examples:
                example-1:
                  value:
                    bucket:
                      Name: travel-sample
                      FlushEnabled: false
                      ReplicaIndexDisabled: true
                      RAMQuotaMB: 200
                      NumReplicas: 0
                      BucketType: membase
                      EvictionPolicy: valueOnly
                      MaxTTL: 0
                      MaxExpiry: 0
                      CompressionMode: passive
                      MinimumDurabilityLevel: 1
                      StorageBackend: couchstore
        '401':
          $ref: '#/components/responses/401'
      operationId: get-v1-buckets-bucketName
      description: Gets information for an individual database or bucket.
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
      tags:
        - Metadata
  /v1/scopes:
    get:
      summary: List Scopes
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of scopes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeList'
              examples:
                example-1:
                  value:
                    scopes:
                      - Name: inventory3
                        Collections: null
                      - Name: inventory2
                        Collections: null
                      - Name: inventory
                        Collections:
                          - Name: airline
                            ScopeName: inventory
                            MaxExpiry: 0
                          - Name: route
                            ScopeName: inventory
                            MaxExpiry: 0
                          - Name: landmark
                            ScopeName: inventory
                            MaxExpiry: 0
                          - Name: hotel
                            ScopeName: inventory
                            MaxExpiry: 0
                          - Name: airport
                            ScopeName: inventory
                            MaxExpiry: 0
                      - Name: tenant_agent_00
                        Collections:
                          - Name: users
                            ScopeName: tenant_agent_00
                            MaxExpiry: 0
                          - Name: bookings
                            ScopeName: tenant_agent_00
                            MaxExpiry: 0
                      - Name: tenant_agent_01
                        Collections:
                          - Name: bookings
                            ScopeName: tenant_agent_01
                            MaxExpiry: 0
                          - Name: users
                            ScopeName: tenant_agent_01
                            MaxExpiry: 0
                      - Name: tenant_agent_02
                        Collections:
                          - Name: bookings
                            ScopeName: tenant_agent_02
                            MaxExpiry: 0
                          - Name: users
                            ScopeName: tenant_agent_02
                            MaxExpiry: 0
                      - Name: tenant_agent_03
                        Collections:
                          - Name: users
                            ScopeName: tenant_agent_03
                            MaxExpiry: 0
                          - Name: bookings
                            ScopeName: tenant_agent_03
                            MaxExpiry: 0
                      - Name: tenant_agent_04
                        Collections:
                          - Name: bookings
                            ScopeName: tenant_agent_04
                            MaxExpiry: 0
                          - Name: users
                            ScopeName: tenant_agent_04
                            MaxExpiry: 0
                      - Name: _default
                        Collections:
                          - Name: _default
                            ScopeName: _default
                            MaxExpiry: 0
        '401':
          $ref: '#/components/responses/401'
      operationId: get-v1-scopes
      description: Gets information about all of the scopes in the current database or bucket.
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
      tags:
        - Metadata
  '/v1/scopes/{scopeName}':
    get:
      operationId: listScopes
      tags:
        - Metadata
      summary: Get Scope Details
      description: Gets information about an individual scope.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
      responses:
        '200':
          description: |
            Success.
            Returns a nested object containing information about one scope.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Scope not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Scope
      operationId: post-v1-scopes
      responses:
        '200':
          description: Success.
        '400':
          description: Scope already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/401'
      description: Creates a scope.
      parameters: []
      tags:
        - Metadata
    delete:
      summary: Delete Scope
      operationId: delete-v1-scopes
      responses:
        '200':
          description: Success.
        '401':
          $ref: '#/components/responses/401'
      description: Deletes a scope, and any collections within it.
      tags:
        - Metadata
      parameters: []
    parameters:
      - $ref: '#/components/parameters/scopeName'
  '/v1/scopes/{scopeName}/collections':
    parameters:
      - $ref: '#/components/parameters/scopeName'
    get:
      summary: List Collections
      tags:
        - Metadata
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of collections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
              examples:
                example-1:
                  value:
                    collections:
                      - Name: airline
                        ScopeName: inventory
                        MaxExpiry: 0
                      - Name: route
                        ScopeName: inventory
                        MaxExpiry: 0
                      - Name: landmark
                        ScopeName: inventory
                        MaxExpiry: 0
                      - Name: hotel
                        ScopeName: inventory
                        MaxExpiry: 0
                      - Name: airport
                        ScopeName: inventory
                        MaxExpiry: 0
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Scope not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-v1-scopes-scopeName-collections
      description: Gets information about all collections in the specified scope.
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
  '/v1/scopes/{scopeName}/collections/{collectionName}':
    get:
      operationId: listCollections
      tags:
        - Metadata
      summary: Get Collection Details
      description: Gets information about an individual collection in the specified scope.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
      responses:
        '200':
          description: |
            Success.
            Returns a nested object containing information about one collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionInfo'
              examples:
                example-1:
                  value:
                    collection:
                      Name: hotel
                      ScopeName: inventory
                      MaxExpiry: 0
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Scope or collection not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Collection
      operationId: post-v1-scopes-scopeName-collections
      responses:
        '200':
          description: Success.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Scope not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Creates a collection in the specified scope.
      parameters: []
      tags:
        - Metadata
    parameters:
      - $ref: '#/components/parameters/scopeName'
      - $ref: '#/components/parameters/collectionName'
    delete:
      summary: Delete Collection
      operationId: delete-v1-scopes-scopeName-collections-collectionName
      responses:
        '200':
          description: Success.
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Scope or collection not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Deletes a collection in the specified scope.
      tags:
        - Metadata
  '/v1/scopes/{scopeName}/collections/{collectionName}/docs/{docId}':
    parameters:
      - $ref: '#/components/parameters/scopeName'
      - $ref: '#/components/parameters/collectionName'
      - $ref: '#/components/parameters/docId'
    get:
      operationId: getDocument
      tags:
        - Documents
      summary: Get Document
      description: Retrieves an individual document, identified by its unique document ID, in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
        - name: replicas
          in: query
          description: If specified, attempts to return available replicas of the document.
          required: false
          schema:
            type: string
            enum:
              - any
              - all
      responses:
        '200':
          description: |
            Success.
            Returns either the document, or all document replicas, as requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocLookup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    head:
      operationId: existsDocument
      summary: Check Document Exists
      description: Checks whether a document exists or not in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
      responses:
        '204':
          description: Document found.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Documents
    post:
      operationId: createDocument
      summary: Create Document
      description: Creates or updates a document, identified by its unique ID, in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/docExpiry'
        - $ref: '#/components/parameters/docPreserveExpiry'
        - $ref: '#/components/parameters/docDurability'
        - $ref: '#/components/parameters/meta'
        - name: upsert
          in: query
          description: |
            Whether to update an existing document.

            When `true`, if the document already exists, the document is overwritten.
            When `false`, if the document already exists, the operation fails.
          required: false
          schema:
            type: boolean
      requestBody:
        description: The document content.
        required: true
        content:
          application/json:
            schema: {}
            example:
              id: 10
              name: 40-Mile Air
              iata: Q5
              icao: MLA
              country: United States
              accessCount: 50
      responses:
        '201':
          description: Document created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocMod'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '409':
          description: Document already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Documents
    put:
      operationId: updateDocument
      summary: Update Document
      description: Replaces a document, identified by its unique ID, in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/docExpiry'
        - $ref: '#/components/parameters/docPreserveExpiry'
        - $ref: '#/components/parameters/docDurability'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
        - $ref: '#/components/parameters/consistencyToken'
        - name: upsert
          in: query
          description: |
            Whether to create the document if it does not exist.

            When `true`, if the document does not already exist, the document is created.
            When `false`, if the document does not already exist, the operation fails.

            This parameter ignores the consistency token.
          required: false
          schema:
            type: boolean
        - name: lockTime
          in: query
          description: If specified, locks the document for the provided duration.
          required: false
          schema:
            type: string
            format: duration
      requestBody:
        description: The document content.
        required: true
        content:
          application/json:
            schema: {}
            example:
              id: 10
              name: 40-Mile Air
              iata: Q5
              icao: MLA
              country: United States
              accessCount: 50
      responses:
        '201':
          description: Document modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocMod'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Consistency token (CAS) mismatch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Documents
    delete:
      operationId: removeDocument
      summary: Delete Document
      description: Removes a document, identified by its unique ID, in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/docDurability'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
        - $ref: '#/components/parameters/consistencyToken'
      responses:
        '200':
          description: |
            Success.
            Document removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocMod'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Consistency token (CAS) mismatch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Documents
  '/v1/scopes/{scopeName}/collections/{collectionName}/subdocs/{docId}':
    parameters:
      - $ref: '#/components/parameters/scopeName'
      - $ref: '#/components/parameters/collectionName'
      - $ref: '#/components/parameters/docId'
    get:
      operationId: lookupInDocument
      tags:
        - Subdocuments
      summary: Partial Document Lookup
      description: Retrieves individual properties within a single document in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
      requestBody:
        description: An array of objects, each of which contains the specifications for one subdocument lookup.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SubdocReqLookup'
              example:
                - type: get
                  path: username
                - type: count
                  path: friends
            examples:
              example-1:
                value:
                  - type: get
                    path: string
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of subdocuments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubdocResLookup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: mutateInDocument
      summary: Partial Document Mutation
      description: Modifies individual properties within a single document in the specified scope and collection.
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
        - $ref: '#/components/parameters/docExpiry'
        - $ref: '#/components/parameters/docPreserveExpiry'
        - $ref: '#/components/parameters/docDurability'
        - $ref: '#/components/parameters/consistencyToken'
        - name: storeSemantics
          in: query
          description: The outer document store semantics.
          required: false
          schema:
            type: string
            enum:
              - replace
              - upsert
              - insert
      requestBody:
        description: An array of objects, each of which contains information for one subdocument mutation.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SubdocReqMutate'
            example:
              - type: replace
                path: username
                value: Thomas
              - type: remove
                path: age
                value: foo
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of subdocuments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubdocResMutate'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Document already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Subdocuments
  '/v1/scopes/{scopeName}/query':
    post:
      operationId: scopeQueryReadWrite
      tags:
        - Queries
      summary: Run SQL++ Query
      description: Performs a SQL++ query in the specified scope.
      parameters:
        - $ref: '#/components/parameters/scopeName'
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
        - $ref: '#/components/parameters/docPreserveExpiry'
        - $ref: '#/components/parameters/readonly'
        - name: adhoc
          required: false
          description: |
            Whether to perform an ad-hoc statement or a prepared statement.

            When `true`, the query plan is not cached for reuse.
            If a prepared statement has been created from this query previously, the cached query plan is not reused.

            When `false`, if this query has not been executed before, the query plan is cached for reuse.
            If a prepared statement has been created from this query previously, the cached query plan is reused.
          in: query
          schema:
            type: boolean
        - name: flexIndex
          required: false
          description: Enables full-text search index capabilities for this query.
          in: query
          schema:
            type: boolean
        - name: scanConsistency
          required: false
          in: query
          description: |
            Specifies the consistency guarantee or constraint for index scanning.
            The valid values are:

            `notBounded` &mdash;
            No timestamp vector is used in the index scan.
            This is the fastest mode, because it avoids the costs of obtaining the vector and waiting for the index to catch up to the vector.

            `requestPlus` &mdash;
            This implements strong consistency per request.
            Before processing the request, a current vector is obtained.
            The vector is used as a lower bound for the statements in the request.
            If there are DML statements in the request, RYOW (read your own write) is also applied within the request.

          schema:
            type: string
            enum:
              - notBounded
              - requestPlus
        - name: scanWait
          required: false
          in: query
          description: |
            Can be supplied when `scanConsistency` is set to `requestPlus`.

            Specifies how much time the client is willing to wait for the indexer to satisfy the required `scanConsistency` criteria.
            After receiving the scan request, if the indexer is unable to catch up within the `scanWait` time and initiate the scan, the indexer aborts with an error and the scan fails.

            The format includes an amount and a mandatory unit, e.g. `10ms` (10 milliseconds) or `0.5s` (half a second).

            Valid units are:
            `ns` (nanoseconds),
            `us` (microseconds),
            `ms` (milliseconds),
            `s` (seconds),
            `m` (minutes),
            `h` (hours).

          schema:
            type: string
            format: duration
        - name: maxParallelism
          required: false
          in: query
          description: Specifies the maximum parallelism for the query.
          schema:
            type: integer
        - name: pipelineBatch
          required: false
          in: query
          description: Controls the number of items execution operators can batch for fetch from the Data service.
          schema:
            type: integer
        - name: pipelineCap
          required: false
          in: query
          description: Maximum number of items each execution operator can buffer between various operators.
          schema:
            type: integer
        - name: scanCap
          required: false
          in: query
          description: |
            Maximum buffered channel size between the indexer client and the query service for index scans.
            This parameter controls when to use scan backfill.

            Smaller values reduce garbage collection, while larger values reduce indexer backfill.

          schema:
            type: integer
      requestBody:
        description: An object containing the SQL++ query and parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryReq"
            example:
              query: SELECT firstname FROM users
      responses:
        '200':
          description: |
            Success.
            Returns an object containing query results and metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRes'
                example:
                  docs:
                    - firstname: Michael
                    - firstname: Jagadesh
                  meta:
                    metrics:
                      elapsedTime: 131.492184ms
                      executionTime: 131.261322ms
                      sortCount: 0
                      resultCount: 2
                      resultSize: 2
                      mutationCount: 0
                      errorCount: 0
                      warningCount: 0
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
  '/v1/scopes/{scopeName}/collections/{collectionName}/docs':
    parameters:
      - $ref: '#/components/parameters/scopeName'
      - $ref: '#/components/parameters/collectionName'
    get:
      summary: List Documents or Get Bulk Documents
      operationId: listDocsInCollection
      description: Fetch a list of documents, or retrieve documents in bulk, in the specified scope and collection.
      responses:
        '200':
          description: |
            Success.
            Returns an object containing documents and metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResLookup'
              examples:
                example-1:
                  value:
                    docs:
                      - id: abc
                        doc:
                          country: India
                          name: abc
                      - id: abc10
                        doc:
                          country: US
                          name: abc10
                    meta:
                      api:
                        RequestID: 232ec039-a202-45d1-a277-e00847d8a07f
                        ClientContextID: dd3360dd-c47f-49ac-b4b4-b7bf404cbfbb
                        Status: success
                        Metrics:
                          ElapsedTime: 22241050
                          ExecutionTime: 22130406
                          ResultCount: 2
                          ResultSize: 97
                          MutationCount: 0
                          SortCount: 0
                          ErrorCount: 0
                          WarningCount: 0
                        Signature:
                          '*': '*'
                          meta_id: json
                        Warnings: []
                        Profile: null
        '401':
          $ref: '#/components/responses/401'
      parameters:
        - $ref: '#/components/parameters/timeout'
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/meta'
        - name: pagesize
          schema:
            type: integer
          in: query
          description: |
            The number of documents to return in each page of results.
            Can be used with `page` to paginate the results.
        - schema:
            type: integer
          in: query
          name: page
          description: |
            The page of results to return.
            Can be used with `pagesize` to paginate the results.
        - schema:
            type: integer
          in: query
          name: limit
          description: |
            The number of documents to return.
            Identical to `pagesize`.
            Similar to the `LIMIT` clause in SQL++.
        - schema:
            type: integer
          in: query
          name: offset
          description: |
            The number of documents to skip before returning results.
            Similar to the `OFFSET` clause in SQL++.
        - schema:
            type: string
          in: query
          name: fields
          description: |
            A list of field names, separated by comma.
            Only the specified fields are returned in the results.
        - schema:
            type: string
          in: query
          name: where
          description: |
            A condition that must be met for a document to be returned.
            Similar to the `WHERE` clause in SQL++.
        - schema:
            type: string
          in: query
          name: orderBy
          description: |
            The name of a field by which to sort the results.
            Similar to the `ORDER BY` clause in SQL++.
        - schema:
            type: string
          in: query
          name: order
          description: Used with `orderBy` to specify the direction of the sort.
        - schema:
            type: string
          in: query
          name: ids
          description: |
            A list of document IDs, separated by comma.
            Only the specified documents are returned in the results.
        - schema:
            type: boolean
          in: query
          name: exists
          description: |
            Whether to check on a document's existence.
            When `true`, the request merely checks that matching documents exist.
            When `false`, the request returns all matching documents.
      tags:
        - Bulk Documents
        # - Documents
    post:
      summary: Create Bulk Documents
      operationId: post-v1-scopes-scopeName-collections-collectionName-docs
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of created document IDs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResMod'
        '401':
          $ref: '#/components/responses/401'
      description: Creates documents in bulk in the specified scope and collection.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              x-examples:
                example-1:
                  - id: x_y_z2
                    value:
                      name: xyz2
                      country: US
                  - id: abc2
                    value:
                      name: abc2
                      country: India
              items:
                $ref: '#/components/schemas/BulkReq'
        description: An array of objects, each of which contains the ID and value of a document to create.
      parameters:
        - schema:
            type: boolean
          in: query
          name: upsert
          description: |
            Whether to update existing documents.

            When `true`, if a document already exists, the document is overwritten.
            When `false`, if a document already exists, the operation fails.
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/metaErrors'
      tags:
        - Bulk Documents
    put:
      summary: Update Bulk Documents
      operationId: put-v1-scopes-scopeName-collections-collectionName-docs
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of updated document IDs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResMod'
              examples:
                example-1:
                  value:
                    docs:
                      - id: x_y_z2
                      - id: abc2
        '401':
          $ref: '#/components/responses/401'
      description: Updates documents in bulk in the specified scope and collection.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BulkReq'
              x-examples:
                example-1:
                  - id: x_y_z2
                    value:
                      name: xyz2
                      country: US
                  - id: abc2
                    value:
                      name: abc2
                      country: India
            examples:
              example-1:
                value:
                  - id: x_y_z2
                    value:
                      name: xyz2
                      country: US
                  - id: abc2
                    value:
                      name: abc2
                      country: India
        description: An array of objects, each of which contains the ID and value of a document to update.
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/metaErrors'
      tags:
        - Bulk Documents
    delete:
      summary: Delete Bulk Documents
      operationId: delete-v1-scopes-scopeName-collections-collectionName-docs
      responses:
        '200':
          description: |
            Success.
            Returns an object containing a nested array of deleted document IDs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResMod'
              examples:
                example-1:
                  value:
                    docs:
                      - id: x_y_z2
                      - id: abc2
        '401':
          $ref: '#/components/responses/401'
      description: Deletes documents in bulk in the specified scope and collection.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              x-examples:
                example-1:
                  - x_y_z2
                  - abc2
            examples:
              example-1:
                value:
                  - x_y_z2
                  - abc2
        description: An array of strings, each of which is the ID of a document to delete.
      tags:
        - Bulk Documents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/metaErrors'
components:
  securitySchemes:
    Basic:
      type: http
      scheme: basic
      description: >
        The Data API supports basic HTTP authentication.
        The user name is your API key and the password is your Secret key.
        You must generate the API key and the Secret key using the Couchbase Capella user interface.
  parameters:
    scopeName:
      name: scopeName
      in: path
      description: The name of the scope.
      required: true
      schema:
        type: string
    collectionName:
      name: collectionName
      in: path
      description: The name of the collection.
      required: true
      schema:
        type: string
    docId:
      name: docId
      in: path
      description: The unique ID of the document.
      required: true
      schema:
        type: string
    timeout:
      name: timeout
      in: query
      description: A custom timeout for the operation.
      required: false
      schema:
        type: string
        format: duration
    pretty:
      name: pretty
      in: query
      description: Whether the output should be formatted with indentations and newlines.
      required: false
      schema:
        type: boolean
    meta:
      name: meta
      in: query
      description: Whether metadata should be included in the response.
      required: false
      schema:
        type: boolean
    metaErrors:
      name: meta
      in: query
      description: Whether metadata and errors should be included in the response.
      required: false
      schema:
        type: boolean
    docExpiry:
      name: expiry
      in: query
      description: The expiration time of the document.
      required: false
      schema:
        type: string
    docPreserveExpiry:
      name: preserveExpiry
      in: query
      description: |
        Specifies whether documents should keep their current expiration setting if modified by the request.
        
        When `true`, documents will keep any existing expiration setting if modified by the request.
        If the request explicitly specifies the document expiration, the statement overrides this parameter, and the expiration is changed.
        
        When `false`, document expiration is set to 0 if modified by the request, unless the request explicitly specifies the document expiration.
        
        Not supported for SQL++ statements in a transaction.
      schema:
        type: boolean
    docDurability:
      name: durability
      in: query
      description: The level of durability for mutations produced by the request.
      required: false
      schema:
        type: string
        enum:
          - majority
          - majorityPersistActive
          - persistMajority
    consistencyToken:
      name: consistencyToken
      in: query
      description: An opaque token that can be used for operations that require coordinated consistency.
      required: false
      schema:
        type: string
    readonly:
      schema:
        type: boolean
      in: query
      name: readonly
      description: |
        Controls whether a query can change a resulting recordset.

        If `readonly` is `true`, then the following statements are not allowed:

        `CREATE INDEX`,
        `DROP INDEX`,
        `INSERT`,
        `MERGE`,
        `UPDATE`,
        `UPSERT`.

      required: false
  schemas:
    SystemMeta:
      type: object
      title: System Metadata
      description: >
        A wrapper object containing system metadata.
        Only included if requested.
      properties:
        logs:
          $ref: '#/components/schemas/SystemMetaLogs'
      required:
        - logs
    SystemMetaLogs:
      type: object
      title: System Metadata Logs
      description: A nested object containing log metadata.
      properties:
        elapsedTime:
          type: string
          format: duration
          description: The total time taken for the request, that is the time from when the request was received until the results were returned.
        requestAgent:
          type: string
          description: The agent used to make the request.
        requestPath:
          type: string
          description: The path of the request.
    BucketList:
      type: object
      title: Bucket List
      x-examples:
        example-1:
          buckets:
            - Name: api-test
              FlushEnabled: false
              ReplicaIndexDisabled: false
              RAMQuotaMB: 1024
              NumReplicas: 1
              BucketType: membase
              EvictionPolicy: valueOnly
              MaxTTL: 0
              MaxExpiry: 0
              CompressionMode: passive
              MinimumDurabilityLevel: 1
              StorageBackend: couchstore
            - Name: travel-sample
              FlushEnabled: false
              ReplicaIndexDisabled: true
              RAMQuotaMB: 200
              NumReplicas: 0
              BucketType: membase
              EvictionPolicy: valueOnly
              MaxTTL: 0
              MaxExpiry: 0
              CompressionMode: passive
              MinimumDurabilityLevel: 1
              StorageBackend: couchstore
      properties:
        buckets:
          type: array
          description: An array of objects, each of which contains information about one database or bucket.
          items:
            $ref: '#/components/schemas/BucketSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
      required:
        - buckets
    BucketInfo:
      type: object
      title: Bucket Information
      properties:
        bucket:
          $ref: '#/components/schemas/BucketSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
      required:
        - bucket
    BucketSchema:
      type: object
      title: Bucket Details
      description: The properties of a database or bucket.
      discriminator:
        propertyName: BucketType
        mapping:
          membase: BucketSchemaCouchbase
          ephemeral: BucketSchemaEphemeral
      properties:
        Name:
          type: string
          description: The name of the bucket or database.
          example: api-test
        FlushEnabled:
          description: Whether flushing is enabled for the bucket.
          type: boolean
          default: false
        RAMQuotaMB:
          description: The amount of memory allocated to the bucket, per node, in MiB.
          type: integer
          minimum: 100
          example: 1024
        NumReplicas:
          description: The number of replicas for the bucket.
          type: integer
          minimum: 1
          maximum: 4
          default: 1
        BucketType:
          type: string
          enum:
            - membase
            - ephemeral
          description: |
            The type of bucket.
            Different properties may be returned, depending on the bucket type.

            * `membase` &mdash; A Couchbase bucket.
            * `ephemeral` &mdash; A memory-only bucket.
        MaxTTL:
          type: integer
          format: int32
          description: |
            The bucket's time to live (TTL) in seconds.
            This imposes a maximum lifespan on items within a bucket, and thus ensures the expiration of such items, once the specified period is complete.
          maximum: 2147483648
          minimum: 0
          default: 0
        MaxExpiry:
          type: number
          description: The maximum expiry.
          example: 0
        CompressionMode:
          type: string
          enum:
            - 'off'
            - passive
            - active
          description: |
            The compression mode for the bucket.
            The possible values are:

            * `off`: Always send compressed items in uncompressed form.
            * `passive`: Send compressed items in uncompressed form by default.
            * `active`: Send compressed items in compressed form by default.
          default: passive
        MinimumDurabilityLevel:
          type: number
          description: |
            The minimum level at which all writes to the bucket must occur.
          example: 1
        StorageBackend:
          type: string
          enum:
            - couchstore
            - magma
          description: The storage backend used by the bucket.
          default: couchstore
    BucketSchemaCouchbase:
      title: Couchbase Buckets
      description: The properties of a Couchbase database or bucket.
      allOf:
        - $ref: '#/components/schemas/BucketSchema'
        - $ref: '#/components/schemas/BucketXtraCouchbase'
    BucketSchemaEphemeral:
      title: Memory-Only Buckets
      description: The properties of a memory-only database or bucket.
      allOf:
        - $ref: '#/components/schemas/BucketSchema'
        - $ref: '#/components/schemas/BucketXtraEphemeral'
    BucketXtraCouchbase:
      type: object
      title: Bucket Details for Couchbase Buckets
      properties:
        ReplicaIndexDisabled:
          description: |
            Specifies whether view indexes are replicated.
            Only valid for a Couchbase bucket.

            When `true`, replica view indexes are disabled.
            When `false`, view indexes are replicated.
          type: boolean
          example: false
        EvictionPolicy:
          type: string
          enum:
            - valueOnly
            - fullEviction
          description: |
            The eviction policy of the bucket or database.
            For a Couchbase bucket, the possible values are:

            * `valueOnly`: The bucket only ejects data when it removes a document from memory.
            * `fullEviction`: The bucket ejects data, metadata, keys, and values when it removes a document from memory.
          default: valueOnly
    BucketXtraEphemeral:
      type: object
      title: Bucket Details for Memory-Only Buckets
      properties:
        EvictionPolicy:
          type: string
          enum:
            - noEviction
            - nruEviction
          description: |
            The eviction policy of the bucket or database.
            For a memory-only bucket, the possible values are:

            * `noEviction`: If the bucket reaches its memory quota, the bucket doesn't eject any existing data and attempts to cache new data fail.
            * `nruEviction`: If the bucket reaches its memory quota, the bucket ejects older documents from RAM to make space for new data.
          default: noEviction
    BulkResMod:
      type: object
      title: Bulk Modify Response
      properties:
        docs:
          type: array
          description: An array of objects, each of which contains information about one document.
          items:
            $ref: '#/components/schemas/BulkResModSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
      x-examples:
        example-1:
          docs:
            - id: x_y_z2
            - id: abc2
    BulkResModSchema:
      type: object
      title: Bulk Modify Details
      required:
        - id
      properties:
        id:
          type: string
          description: The ID of a document.
    BulkResLookup:
      type: object
      title: Bulk Lookup Response
      required:
        - docs
      properties:
        docs:
          type: array
          description: An array of objects, each of which contains information about one document.
          items:
            $ref: '#/components/schemas/BulkResLookupSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
    BulkResLookupSchema:
      type: object
      title: Bulk Lookup Details
      properties:
        id:
          type: string
          description: The ID of a document.
        doc:
          description: >
            The content of a single document.
            Not included if just checking for the existence of the document.
        meta:
          $ref: '#/components/schemas/DocModMeta'
      required:
        - id
    ScopeList:
      type: object
      title: Scope List
      required:
        - scopes
      properties:
        scopes:
          type: array
          description: An array of objects, each of which contains information about one scope.
          items:
            $ref: '#/components/schemas/ScopeSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
    ScopeInfo:
      type: object
      title: Scope Information
      properties:
        scope:
          $ref: '#/components/schemas/ScopeSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
      required:
        - scope
    ScopeSchema:
      type: object
      title: Scope Details
      description: An object which contains information about one scope.
      properties:
        name:
          type: string
          description: The name of the scope.
        collections:
          type: array
          description: An array of objects, each of which contains information about one collection.
          items:
            $ref: '#/components/schemas/CollectionSchema'
    CollectionList:
      type: object
      title: Collection List
      required:
        - collections
      properties:
        collections:
          type: array
          description: An array of objects, each of which contains information about one collection.
          items:
            $ref: '#/components/schemas/CollectionSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
    CollectionInfo:
      type: object
      title: Collection Information
      properties:
        collection:
          $ref: '#/components/schemas/CollectionSchema'
        meta:
          $ref: '#/components/schemas/SystemMeta'
      required:
        - collection
    CollectionSchema:
      type: object
      title: Collection Details
      description: An object which contains information about one collection.
      properties:
        Name:
          type: string
          description: The name of the collection.
          example: hotel
        ScopeName:
          type: string
          description: The name of the scope which contains the collection.
          example: inventory
        MaxExpiry:
          type: number
          description: The maximum expiry for the collection.
          example: 0
    DocLookupReplica:
      title: Document Lookup Replicas
      type: object
      required:
        - docs
      properties:
        docs:
          type: array
          description: An array of documents, each representing a currently available replica.
          items: {}
        meta:
          $ref: '#/components/schemas/DocLookupReplicaMeta'
      example:
        docs:
          active:
            id: 10
            name: 40-Mile Air
            iata: Q5
            icao: MLA
            country: United States
            accessCount: 50
          replicas:
            - id: 10
              name: 40-Mile Air
              iata: Q5
              icao: MLA
              country: United States
              accessCount: 48
    DocLookupReplicaMeta:
      title: Document Lookup Replicas Metadata
      type: object
      description: >
        A wrapper object containing replicas metadata.
        Only included if requested.
      required:
        - api
      properties:
        api:
          type: array
          description: An array of objects, each containing document metadata.
          items:
            $ref: '#/components/schemas/DocLookupShareMetaAPI'
    DocLookup:
      title: Document Lookup Response
      oneOf:
        - $ref: '#/components/schemas/DocLookupDefault'
        - $ref: '#/components/schemas/DocLookupReplica'
    DocLookupDefault:
      title: Document Lookup Default
      type: object
      required:
        - doc
      properties:
        doc:
          description: The content of a single document.
        meta:
          $ref: '#/components/schemas/DocLookupDefaultMeta'
      example:
        doc:
          id: 10
          name: 40-Mile Air
          iata: Q5
          icao: MLA
          country: United States
          accessCount: 50
    DocLookupDefaultMeta:
      type: object
      title: Document Lookup Default Metadata
      description: >
        A wrapper object containing document metadata.
        Only included if requested.
      required:
        - api
      properties:
        api:
          $ref: '#/components/schemas/DocLookupShareMetaAPI'
    DocLookupShareMetaAPI:
      type: object
      title: Document Concurrency and Expiry
      description: A nested object containing API metadata.
      properties:
        consistencyToken:
          type: string
          description: The consistency token which can be used for optimistic concurrency.
        expiry:
          type: string
          format: duration
          description: The document expiry.
        expiryTime:
          type: string
          format: date-time
          description: The date and time when the document will expire.
    DocMod:
      type: object
      title: Document Modify Response
      properties:
        meta:
          $ref: '#/components/schemas/DocModMeta'
      example:
        meta:
          consistencyToken: eyJjYXMiOjE2NTA5NjIxODU3MDQ0Mzk4MDgsIm11dGF0a
    DocModMeta:
      type: object
      title: Document Modify Metadata
      description: >
        A wrapper object containing document metadata.
        Only included if requested.
      required:
        - api
      properties:
        api:
          $ref: '#/components/schemas/DocModMetaAPI'
    DocModMetaAPI:
      type: object
      title: Document Concurrency
      description: A nested object containing API metadata.
      properties:
        consistencyToken:
          type: string
          description: The consistency token which can be used for optimistic concurrency.
    SubdocSchema:
      title: Subdocument Details
      type: object
      required:
        - type
        - path
        - value
      properties:
        type:
          type: string
          description: The type of action that was performed on the subdocument.
          enum:
            - get
            - exists
            - count
            - replace
            - insert
            - remove
            - upsert
            - arrayAppend
            - arrayPrepend
            - arrayInsert
            - arrayAddUnique
            - increment
            - decrement
        path:
          type: string
          description: The location of the subdocument within the document, using SQL++ nested path syntax.
        content:
          description: |
            For `get` lookup requests, the subdocument value.

            For `exists` lookup requests, a boolean.

            For `count`, `increment`, or `decrement` requests, an integer.
    SubdocReqLookup:
      title: Subdocument Lookup Request
      type: object
      required:
        - type
        - path
      properties:
        type:
          type: string
          description: |
            The type of action to perform.

            * `get` &mdash; Fetch the subdocument from the given path.
            * `exists` &mdash; Check whether the given path exists.
            * `count` &mdash; Count the number of elements in the array or object at the given path.
          enum:
            - get
            - exists
            - count
        path:
          type: string
          description: The location within the document where the action should be performed, using SQL++ nested path syntax.
    SubdocReqMutate:
      title: Subdocument Mutation Request
      type: object
      required:
        - type
        - path
      properties:
        type:
          type: string
          description: >
            The type of action to perform.


            * `replace` &mdash; Replace the value at the specified path.

            * `insert` &mdash; Add the value at the given path, if the given path does not exist.

            * `remove` &mdash; Remove the specified path.

            * `upsert` &mdash; Unconditionally set the value at the path.

            * `arrayAppend` &mdash; Add the value at the end of the array indicated by the path.

            * `arrayPrepend` &mdash; Add the value at the start of the array indicated by the path.

            * `arrayInsert` &mdash; Add the value at the given array index.
              Path must include index, e.g. `my.list[4]`.

            * `arrayAddUnique` &mdash; Add the value to the array indicated by the path, if the value is not already in the array.

            * `increment` or `decrement` &mdash; increase or decrease a numeric value by the value provided.
          enum:
            - replace
            - insert
            - remove
            - upsert
            - arrayAppend
            - arrayPrepend
            - arrayInsert
            - arrayAddUnique
            - increment
            - decrement
        path:
          type: string
          description: The location within the document where the action should be performed, using SQL++ nested path syntax.
        value:
          description: The subdocument value.
    SubdocResLookup:
      title: Subdocument Lookup Response
      type: object
      required:
        - subdocs
      properties:
        subdocs:
          type: array
          description: An array of objects, each of which contains information about one subdocument.
          items:
            $ref: '#/components/schemas/SubdocSchema'
        meta:
          $ref: '#/components/schemas/DocModMeta'
      example:
        subdocs:
          - type: get
            path: username
            content: Michael
          - type: count
            path: friends
            content: 2
        meta:
          consistencyToken: eyJjYXMiOjE2NTA5NjIxODU3MDQ0Mzk4MDgsIm11dGF0a
    SubdocResMutate:
      title: Subdocument Mutation Response
      type: object
      required:
        - subdocs
      properties:
        subdocs:
          type: array
          description: An array of objects, each of which contains information about one subdocument.
          items:
            $ref: '#/components/schemas/SubdocSchema'
        meta:
          $ref: '#/components/schemas/DocModMeta'
      example:
        subdocs:
          - type: replace
            path: username
          - type: remove
            path: age
        meta:
          consistencyToken: eyJjYXMiOjE2NTA5NjIxODU3MDQ0Mzk4MDgsIm11dGF0a
    BulkReq:
      type: object
      title: Bulk Modify Request
      properties:
        id:
          type: string
          description: The ID of a document.
        value:
          description: The document value.
      required:
        - id
        - value
    QueryReq:
      type: object
      title: Query Request
      required:
        - query
      properties:
        query:
          type: string
          description: The text of the SQL++ query.
        parameters:
          $ref: '#/components/schemas/QueryReqParams'
        raw:
          description: An object containing the names and values for any parameters which do not have an explicit query property.
          type: object
    QueryReqParams:
      title: Query Parameters
      description: |
        Specifies dynamic parameters for the query.

        May be either an object containing named parameters, or an array of positional parameters.
      oneOf:
        - title: Named Parameters
          type: object
          description: An object containing parameter names and values.
        - title: Positional Parameters
          type: array
          description: An array containing positional parameter values.
          items: {}
    QueryRes:
      title: Query Response
      type: object
      required:
        - docs
      properties:
        docs:
          type: array
          description: An array of document values.
          items: {}
        meta:
          $ref: '#/components/schemas/QueryResMeta'
    QueryResMeta:
      title: Query Metadata
      type: object
      description: >
        A wrapper object containing query metadata.
        Only included if requested.
      properties:
        api:
          $ref: '#/components/schemas/QueryResMetaAPI'
      required:
        - api
    QueryResMetaAPI:
      title: Query API Metadata
      type: object
      description: A nested object containing API metadata.
      properties:
        requestID:
          type: string
          format: UUID
          description: A unique identifier for the response.
        clientContextID:
          type: string
          description: The client context ID of the request, if one was supplied.
        status:
          type: string
          description: The status of the request.
          enum:
            - success
            - running
            - errors
            - completed
            - stopped
            - timeout
            - fatal
        metrics:
          $ref: '#/components/schemas/QueryResMetaAPIMetrics'
        signature:
          type: object
          description: >
            The schema of the results.
            Present only when the query completes successfully.
        errors:
          type: array
          description: >
            An array of 0 or more error objects.
            If an error occurred during processing of the request, it will be represented by an error object in this list.
          items:
            type: object
        warnings:
          type: array
          description: >
            An array of 0 or more warning objects.
            If a warning occurred during processing of the request, it is represented by a warning object in this list.
          items:
            type: object
        profile:
          type: object
          description: >
            An object containing statistics and details about various phases of the query plan and execution.
            Also includes a full query plan with timing and information about the number of processed documents at each phase.
    QueryResMetaAPIMetrics:
      title: Query Response Metrics
      type: object
      description: An object containing query response metrics.
      properties:
        elapsedTime:
          type: string
          format: duration
          description: The total time taken for the request, that is the time from when the request was received until the results were returned.
        executionTime:
          type: string
          format: duration
          description: The time taken for the execution of the request, that is the time from when query execution started until the results were returned.
        sortCount:
          type: integer
          description: |
            The number of objects that were sorted.
            Present only if the request includes `ORDER BY`.

            If a query includes `ORDER BY`, `LIMIT`, or `OFFSET` clauses, an application can use this value to give the overall number of results in a message such as "page 1 of N".
        resultCount:
          type: integer
          description: The total number of objects in the results.
        resultSize:
          type: integer
          description: The total number of bytes in the results.
        mutationCount:
          type: integer
          description: The number of mutations that were made during the request.
        errorCount:
          type: integer
          description: The number of errors that occurred during the request.
        warningCount:
          type: integer
          description: The number of warnings that occurred during the request.
    Error:
      type: object
      properties:
        code:
          type: number
          description: The unique error code.
        message:
          type: string
          description: The human-readable description of the error.
        hints:
          type: array
          description: Potential suggestions on how to remedy the error, depending on the cause.
          items:
            type: string
      required:
        - code
        - message
  examples:
    example-1:
      value:
        docs:
          - id: x_y_z2
          - id: abc2
  responses:
    '400':
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
